/**
 * 函数值这样的一段js代码，它只定义一次，但可能被执行或调用任意次。你可能已经从诸如子例程(subroutine)
 * 或者过程(procedure)这些名字里对函数的概念有所了解。js函数是参数化的：函数的定义会包括一个
 * 称为形参（parameter）的标识符列表,这些参数在函数体中像局部变量一样工作。函数调用会为形参提供
 * 实参的值。函数使用他们实参的值来计算返回值，成为该函数调用表达式的值。除了实参之外，每次调用
 * 换回拥有另一个值--本次调用的上下文--这就是this关键字的值。
 * 
 * 如果函数挂载在一个对象上，作为对象的一个属性，就称它为对象的方法。当通过这个对象来调用函数时，
 * 该对象就是此次调用的上下文（context），也就是该函数的this的值。用于初始化一个新创建的对象的
 * 函数称为构造函数(constructor)
 * 
 * 在js里，函数即对象，程序可以随意操作他们。比如js可以把函数赋值为变量，或者作为参数传递给其他函数
 * 因为函数就是对象，所以可以给他们设置属性，甚至调用他们的方法。
 * 
 * js的函数可以嵌套在其他函数中定义，这样他们就可以访问他们被定义时所处的作用于中的任何变量。
 * 这以为着js函数构成了一个闭包（closure），它为js带来了非常强劲的编程能力，
 * 
 * 8.1 函数定义
 * 
 * 函数使用function关键字来定义，它可以用在函数定义表达式或者函数声明语句里。这两种形式中，函数
 * 定义都从function关键字开始，气候跟随这些组成部分：
 * 。函数名称标识符。
 * 
 */