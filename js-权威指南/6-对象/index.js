/**
 * 对象
 * 
 * 对象是js的基本数据类型。对象是一种复合值：它将很多值（原始值或者其他对象）聚合在一起
 * 可通过名字访问这些值。对象也可看作是属性的无序集合，每个属性都是一个名/值对。属性名
 * 是字符串，因此我们可以把对象看成是从字符串到值的映射。这种基本数据结构还有很多种叫法
 * 有些我们已然非常熟悉，比如‘散列’（hash）、‘散列表’（hashtable）、‘字典’（dictionary）
 * ‘关联数组’(associative array)。然而对象不仅仅是字符串到值得映射，除了可以保持自有
 * 的属性，js对象还可以总一个称为原型的对象继承属性。对象的方法通常是继承的属性。这种
 * 原型式继承（prototypal inheritance）是js的核心特征
 * 
 * js对象是动态的--可以新增属性也可以删除属性--但他们常用来模拟静态对象以及静态类型语言
 * 中的‘结构体’（struct）。有时他们也用做字符串的集合（忽略名值对中的值）。
 * 
 * 除了字符串、数字、true、false、null和undefined之外，js中的值都是对象。js中的值都是
 * 对象。尽管字符串、数字和布尔值不是对象，但他们的行为和不可变对象非常相似。
 * 
 * 3.7节已经降到，对象是可变的，我们通过引用而非值来操作对象。如果变量x是指向一个对象的
 * 引用，那么指向代码var y = x;变量y也是指向同一个对象的引用，而非这个对象的副本。通过
 * 变量y修改这个对象亦会对变量x造成影响。
 * 
 * 对象最常见的用法是创建（create）、设置（set）、查找（query）、删除（delete）、检测
 * （test）和枚举（enumerate）它的属性。我们会在开始的几节讲述这些基础操作。后续的几节
 * 讲述高级主题，其中相当一部分内容来自于ECMAScript5
 * 
 * 属性包括名字和值。属性名可以是包含空字符串在内的任意字符串，但对象中不能存在两个同名
 * 的属性。值可以是任意js值，或者可以是一个getter或setter函数（或两者都有）。6.6节会有
 * 关于getter和setter函数的讲解。除了名字和值之外，每个属性还有一些与之相关的值，称为
 * “属性特性”（property attribute）
 * 。可写（writable attribute），表明是否可以设置该属性的值
 * 。可枚举（enumerable attribute），表明是否可以通过for/in循环返回该属性
 * 。可配置（configurable attribute），表明是否可以删除或修改该属性
 * 
 * 在ECMAScript5之前，通过代码给对象创建的所有属性都是可写的、可枚举的盒可配置的。在
 * ECMAScript5中则可以对这些特性加以配置。
 * 
 * 除了包含属性之外，每个对象还拥有三个相关的对象特性（object attribute）
 * 。对象的原型（prototype）指向另一个对象，本对象的属性继承自它的原型对象
 * 对象的类（class）是一个标识对象类型的字符串
 * 对象的扩展标记（extensible flag）指明了是否可以向该对象添加新属性
 * 
 * 最后，我们用下面这些术语来对三类js对象和两类属性做区分
 * 。内置对象（native object）是由ECMAScript规范定义的对象或类。例如，数组、函数、日期
 * 和正则表达式都是内置对象。
 * 。宿主对象（host object）是由js解释器所嵌入的宿主环境（比如web浏览器）定义的。客户端
 * js中标识网页结构的HTMLElement对象均值宿主对象。既然宿主环境定义的方法可以当成普通的
 * js函数对象，那么宿主对象也可以当成内置对象。
 * 。自定义对象（user-defined object）是由允许中的js代码创建的对象。
 * 。自有属性（own property）是直接在对象中定义的属性
 * 。继承属性（inherited property）实在对象的原型对象中定义的属性
 * 
 * 6.1 创建对象
 */